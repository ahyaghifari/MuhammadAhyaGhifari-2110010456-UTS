/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ahyaghifari.aplikasiresepmasakan;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import model.ResepMasakan;

/**
 *
 * @author Ahya Ghifari
 */
public class FrameImportExportResepMasakan extends javax.swing.JFrame {

    /**
     * Creates new form FrameImportExportResepMasakan
     */
    
    private String context = "";
    
    
    public FrameImportExportResepMasakan() {
        initComponents();
        setLocationRelativeTo(null);
    }

    public FrameImportExportResepMasakan(String context){
        initComponents();
        setLocationRelativeTo(null);
       // melakukan setting terhadap context dan frame design sesuai keadaan import atau export
        if(context == "IMPORT"){
             lblContext.setText("Import dari");
            btnContext.setText("Import");
            this.context = "IMPORT";
            chImportable.setEnabled(false);
        }else{
            lblContext.setText("Ekspor ke");
            btnContext.setText("Ekspor");
            this.context = "EXPORT";
            chImportable.setEnabled(true);
        }
    }
    
    // mengambil nilai dari jenis file export atau import
    public String getSelectedFile(){
        if(rbText.isSelected()){
            return "txt";
        }else if(rbJson.isSelected()){
            return  "json";
        }else{
            return "";
         }
    }
    
    // mengambil nilai apakah import menggunakan file text (txt) dapat di import pad program
    public boolean getImportable(){
        if(chImportable.isSelected()){
            return true;
        }else{
            return false;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblContext = new javax.swing.JLabel();
        rbText = new javax.swing.JRadioButton();
        rbJson = new javax.swing.JRadioButton();
        chImportable = new javax.swing.JCheckBox();
        btnContext = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(252, 255, 231));

        lblContext.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        lblContext.setForeground(new java.awt.Color(222, 160, 87));
        lblContext.setText("Import Ke");

        buttonGroup1.add(rbText);
        rbText.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        rbText.setForeground(new java.awt.Color(51, 51, 51));
        rbText.setText("Text(txt)");

        buttonGroup1.add(rbJson);
        rbJson.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        rbJson.setForeground(new java.awt.Color(51, 51, 51));
        rbJson.setText("JSON");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblContext)
                .addGap(49, 49, 49)
                .addComponent(rbText)
                .addGap(46, 46, 46)
                .addComponent(rbJson)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContext)
                    .addComponent(rbText)
                    .addComponent(rbJson))
                .addGap(26, 26, 26))
        );

        chImportable.setText("Bisa di Import");

        btnContext.setBackground(new java.awt.Color(222, 160, 87));
        btnContext.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnContext.setForeground(new java.awt.Color(255, 255, 255));
        btnContext.setText("Import");
        btnContext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chImportable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnContext)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContext)
                    .addComponent(chImportable))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnContextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContextActionPerformed

        // mengambil jenis file yang dipilih
        String file_as = getSelectedFile();
        
        if(!file_as.equals("")){ // jika file sudah dipilih
        
            // =========================================================== IMPORT ===========================================================
            if(context.equals("IMPORT")){
             
                // IMPORT FILE DARI FILE TEXT(txt)
                if(file_as.equals("txt")){
                   try{
                       File fileResep = new File("resep-masakan-importable.txt"); // mengambil file
                       if(fileResep.exists() && !fileResep.isDirectory()){
                           
                        FrameAplikasiResepMasakan.resepResepMasakan.clear(); // clear atau mengosongkan array list resep terlebih dahulu
                           
                        Scanner resepReader = new Scanner(fileResep); // scan file
                        while(resepReader.hasNextLine()){ // mengambil keseluruhan baris dari resep sesuai bari
                           String lines = resepReader.nextLine(); // mengambil nilai baris
                           
                           String[] data = lines.split(";"); // mengubah string menjadi array dengan pemisah ; (titik koma)
                           
                           // mengambil keseluruhan nilai sesuai index dari array
                           String namaMasakan = data[1];
                           String lamaMemasak = data[2];
                           String bahanBahan = data[3].replace("\\n", "\n");
                           String caraMemasak = data[4].replace("\\n", "\n");
                           
                           // membuat objek resep baru lalu menambahkannya ke array list
                           ResepMasakan resep = new ResepMasakan(data[0], namaMasakan, lamaMemasak, bahanBahan, caraMemasak);
                           FrameAplikasiResepMasakan.resepResepMasakan.add(resep);
                       }
                       dispose();
                       }else{
                           JOptionPane.showMessageDialog(this, "File import text tidak ditemukan. Export terlebih dahulu", "Import", JOptionPane.ERROR_MESSAGE);
                       }
                   }catch(IOException e){
                       JOptionPane.showMessageDialog(this, "Resep gagal di import", "Import", JOptionPane.ERROR_MESSAGE);
                       System.out.println("ERROR : " + e);
                   }
                   
                // IMPORT FILE DARI JSON MENGGUNAKAN LIBRARY GSON
                }else{
                   try{
                       Gson gson = new Gson(); // inisialisasi objek gson
                       TypeToken<ArrayList<ResepMasakan>> resepType = new TypeToken<ArrayList<ResepMasakan>>(){}; // mengambil tipe untuk bentuk konversi json

                       File checkFile = new File("resep-masakan.json"); 
                        if(checkFile.exists() && !checkFile.isDirectory()){ // check terlebih dahulu apakah file sudah ada

                        FrameAplikasiResepMasakan.resepResepMasakan.clear(); // clear atau mengosongkan array list resep terlebih dahulu
                            
                        FileReader fileResep = new FileReader("resep-masakan.json"); // mengambil dan membaca file json

                        ArrayList<ResepMasakan> resep = gson.fromJson(fileResep, resepType.getType()); // konversi dari file sesuai tipe yang sudah ditentukan

                        // Memasukkan setiap nilai json ke dalam array list resep program
                        for(ResepMasakan rm : resep){
                            FrameAplikasiResepMasakan.resepResepMasakan.add(rm);
                        }
                        dispose();
                       }else{
                           JOptionPane.showMessageDialog(this, "File import JSON tidak ditemukan. Export terlebih dahulu", "Import", JOptionPane.ERROR_MESSAGE);
                       }
                   }catch(IOException e){
                       JOptionPane.showMessageDialog(this, "Resep gagal di import", "Import", JOptionPane.ERROR_MESSAGE);
                       System.out.println("ERROR : " + e);
                   }
                }
               
            // =========================================================== EXPORT ===========================================================
            }else{
                
                ArrayList<ResepMasakan> resepResep = FrameAplikasiResepMasakan.resepResepMasakan; // mengambil array list pada frame utama
                
                boolean importable = getImportable();  // mengambil apakah expport text berbentu importable atau tidak
                
                // EXPORT FILE DARI FILE TEXT(txt)
                if(file_as == "txt"){
                    try{
                       // JIKA FILE TXT IMPORTABLE ATAU DAPAT DI IMPORT KE DALAM TABEL
                       if(importable == true){
                           
                           FileWriter fileResep = new FileWriter("resep-masakan-importable.txt"); // membuat file baru
                           
                           // Menuliskan setiap element dari array list resep ke dalam setiap baris file dengan pemisah ; (titik) koma agar bisa dibaca sebagai array ketika di import
                           for(ResepMasakan rm: resepResep){
                               String namaMasakan = rm.getNama();
                               String lamaMemasak = rm.getLamaMemasak();
                               String bahanBahan = rm.getBahanBahan().replace("\n", "\\n"); // menghindari perlakuan membuat garis baru ketika di export
                               String caraMemasak = rm.getCaraMemasak().replace("\n", "\\n");
                               fileResep.write(rm.getIdResepMasakan() + ";" + namaMasakan + ";" + lamaMemasak + ";" + bahanBahan + ";" + caraMemasak + "\n");
                           }
                           fileResep.close();
                           
                        // JIKA FILE TXT DI EXPORT BIASA SAJA
                       }else{
                           
                           // pilih destinasi simpan file 
                            JFileChooser selectDestination = new JFileChooser();
                            selectDestination.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                            selectDestination.showSaveDialog(this);
                            String path = selectDestination.getSelectedFile().getAbsolutePath();
                           
                           FileWriter fileResep = new FileWriter (path + "\\Daftar Resep Masakan By Mamamia.txt"); // membuat file baru
                           
                           fileResep.write("DAFTAR RESEP MASAKAN\n"); // menuliskan judul
                           fileResep.write("By Mamamia\n\n");
                           
                           // menuliskan setiap element resep pada baris baris file
                           for(ResepMasakan rm: resepResep){
                               fileResep.write("====================\n");
                               fileResep.write(rm.getNama() + "\n");
                               fileResep.write("Lama Memasak : " + rm.getLamaMemasak() + "\n\n");
                               fileResep.write("Bahan - Bahan : \n");
                               fileResep.write(rm.getBahanBahan() + "\n\n");
                               fileResep.write("Cara Memasak : \n");
                               fileResep.write(rm.getCaraMemasak() + "\n");
                               fileResep.write("====================\n\n");
                           }
                           fileResep.close();
                       }
                       
                       // pesan informasi
                       JOptionPane.showMessageDialog(rootPane, "Data berhasil di export ke Text(txt)", "Export", JOptionPane.INFORMATION_MESSAGE);
                       dispose();
                    }catch(IOException e){
                        JOptionPane.showMessageDialog(this, "Resep gagal di export", "Export", JOptionPane.ERROR_MESSAGE);
                        System.out.println("ERROR : " + e);
                    }
                
                // EXPORT FILE DARI FILE JSON DENGAN LIBRARY GSON
                }else{
                    try{
                        
                        Gson gson = new Gson(); // inisialisasi objek 
                        
                        String jsonResep = gson.toJson(resepResep); // mengubah array list menjadi bentuk json
                        FileWriter fileResep = new FileWriter("resep-masakan.json");  // membuat file baru dengan format json
                        fileResep.write(jsonResep); // menambahkan array list yang sudah dalam bentuk json ke dalam file
                        fileResep.close();
                        
                        // pesan konfirmasi
                        JOptionPane.showMessageDialog(rootPane, "Data berhasil di export ke JSON", "Export", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    }catch(IOException e){
                        JOptionPane.showMessageDialog(this, "Resep gagal di export", "Export", JOptionPane.ERROR_MESSAGE);
                        System.out.println("ERROR : " + e);
                    }
                }
            }
        }else{ // jika file belum dipilih
            JOptionPane.showMessageDialog(rootPane, "File belum dipilih", "File belum dipilih", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnContextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameImportExportResepMasakan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameImportExportResepMasakan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameImportExportResepMasakan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameImportExportResepMasakan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameImportExportResepMasakan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnContext;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chImportable;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContext;
    private javax.swing.JRadioButton rbJson;
    private javax.swing.JRadioButton rbText;
    // End of variables declaration//GEN-END:variables
}
